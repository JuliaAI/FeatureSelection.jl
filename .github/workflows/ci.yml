name: CI
on:
  pull_request:
    branches:
      - master
      - dev
  push:
    branches:
      - master
      - dev
    tags: '*'
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.6' 
          - '1' # automatically expands to the latest stable 1.x release of Julia.
        os:
          - ubuntu-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - name: "Replace julia libstdcxx ubuntu + julia v1.6"
        shell: bash
        if: ${{ matrix.version == '1.6' && matrix.os == 'ubuntu-latest' }}
        # The following is needed for Julia <=1.8.3 on Linux OS 
        # due to old version of libstcxx used by Julia
        # taken from https://github.com/hhaensel/ReplaceLibstdcxx.jl/blob/main/src/ReplaceLibstdcxx.jl
        run: |
              julia -e '
                libs = filter(x -> ! occursin("32", x), getindex.(split.(readlines(pipeline(`ldconfig -p`, `grep libstdc`)), r"\s*=>\s*"), 2))
                source_dir = dirname(libs[end])
                julia_lib_dir = joinpath(dirname(Sys.BINDIR), "lib", "julia")
                julia_lib_file = get(filter(endswith(r"libstdc\+\+.so\.\d+\.\d+\.\d+"), readdir(julia_lib_dir, join = true)), 1, nothing)
                julia_lib_version = match(r"so(\.\d+)\.", julia_lib_file).captures[1]
                source_lib = get(filter(endswith(r"libstdc\+\+.so\.\d+\.\d+\.\d+"), readdir(source_dir, join = true)), 1, nothing)
                julia_lib = joinpath(dirname(Sys.BINDIR), "lib", "julia", "libstdc++.so")
                for src in [julia_lib, julia_lib * julia_lib_version]
                  islink(src) && rm(src, force = true)
                  symlink(source_lib, src)
                  @info read(`ls -al $src`, String)
                end
                '
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
        env:
          JULIA_NUM_THREADS: 2
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - run: |
         julia -e '
           function set_environment_variable(name::AbstractString, value::AbstractString)
               github_env = ENV["GITHUB_ENV"]
               touch(github_env)
               open(github_env, "a") do io
                   println(io, "$(name)=$(value)")
               end
           end
           event_name = "${{ github.event_name }}"
           ref = "${{ github.ref }}"
           ref_is_master = ref == "refs/heads/master"
           ref_is_dev    = ref == "refs/heads/dev"
           ref_is_tag    = startswith(ref, "refs/tags/")
           if event_name == "pull_request"
               base_ref = "${{ github.base_ref }}"
               head_ref = "${{ github.head_ref }}"
               base_repository = "${{ github.repository }}"
               head_repository = "${{ github.event.pull_request.head.repo.full_name }}"
               is_not_fork = base_repository == head_repository
               build_docs = (base_ref == "master") && (head_ref == "dev") && (is_not_fork)
           elseif event_name == "push"
               build_docs = ref_is_master || ref_is_dev || ref_is_tag
           elseif event_name == "schedule"
               build_docs = ref_is_master || ref_is_dev
           elseif event_name == "workflow_dispatch"
               build_docs = ref_is_master || ref_is_dev
           else
               build_docs = false
           end
           if build_docs
               @info("We will build the docs")
               set_environment_variable("BUILD_DOCS", "true")
           else 
               @info("We will NOT build the docs")
               set_environment_variable("BUILD_DOCS", "false")
           end'
      - run: |
          julia --project=docs -e '
            if ENV["BUILD_DOCS"] == "true"
                using Pkg
                Pkg.develop(PackageSpec(path=pwd()))
                Pkg.instantiate()
            end'
      - run: |
          julia --project=docs -e '
            if ENV["BUILD_DOCS"] == "true"
                using Documenter: doctest
                using FeatureSelection
                @info "attempting to run the doctests"
                doctest(FeatureSelection)
            else
                @info "skipping the doctests"
            end'
      - run: julia --project=docs -e '
            if ENV["BUILD_DOCS"] == "true"
                @info "attempting to build the docs"
                run(`julia --project=docs docs/make.jl`)
                @info "successfully built the docs"
            else
                @info "skipping the docs build"
            end'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
